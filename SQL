-- Connect to your database before running the rest of the script
-- \c "FinancialTracker";

-- Drop existing tables to create a fresh schema
DROP TABLE IF EXISTS historical_prices, transactions, assets, accounts, users CASCADE;

CREATE TABLE IF NOT EXISTS users (
    user_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    username VARCHAR(50) UNIQUE NOT NULL,
    password_hash TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS accounts (
    account_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(user_id),
    account_name VARCHAR(100) NOT NULL
);

-- Note: The 'assets' table now just tracks unique asset IDs and ticker/class info
CREATE TABLE IF NOT EXISTS assets (
    asset_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    account_id UUID REFERENCES accounts(account_id) ON DELETE CASCADE,
    ticker_symbol VARCHAR(10) NOT NULL,
    asset_class VARCHAR(50) NOT NULL,
    UNIQUE (account_id, ticker_symbol)
);

-- The 'transactions' table now stores all purchase, sale, and dividend history
CREATE TABLE IF NOT EXISTS transactions (
    transaction_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    asset_id UUID REFERENCES assets(asset_id) ON DELETE CASCADE,
    transaction_type VARCHAR(20) NOT NULL CHECK (transaction_type IN ('Buy', 'Sell', 'Dividend')),
    transaction_date DATE NOT NULL,
    shares DECIMAL(18, 8),      -- Null for dividends
    price_per_share DECIMAL(18, 8), -- Null for dividends
    amount DECIMAL(18, 8)       -- Total value for Buy/Sell, payout amount for Dividend
);

CREATE TABLE IF NOT EXISTS historical_prices (
    ticker_symbol VARCHAR(10) NOT NULL,
    price_date DATE NOT NULL,
    price DECIMAL(18, 8) NOT NULL,
    PRIMARY KEY (ticker_symbol, price_date)
);
